[{"/home/anshul/robochef/app/self-order-kiosk/src/index.js":"1","/home/anshul/robochef/app/self-order-kiosk/src/App.js":"2","/home/anshul/robochef/app/self-order-kiosk/src/Store.js":"3","/home/anshul/robochef/app/self-order-kiosk/src/constants.js":"4","/home/anshul/robochef/app/self-order-kiosk/src/screens/ChooseScreen.js":"5","/home/anshul/robochef/app/self-order-kiosk/src/screens/HomeScreen.js":"6","/home/anshul/robochef/app/self-order-kiosk/src/screens/QueueScreen.js":"7","/home/anshul/robochef/app/self-order-kiosk/src/screens/ReviewScreen.js":"8","/home/anshul/robochef/app/self-order-kiosk/src/screens/SelectPaymentScreen.js":"9","/home/anshul/robochef/app/self-order-kiosk/src/screens/AdminScreen.js":"10","/home/anshul/robochef/app/self-order-kiosk/src/screens/PaymentScreen.js":"11","/home/anshul/robochef/app/self-order-kiosk/src/screens/CompleteOrderScreen.js":"12","/home/anshul/robochef/app/self-order-kiosk/src/screens/OrderScreen.js":"13","/home/anshul/robochef/app/self-order-kiosk/src/styles.js":"14","/home/anshul/robochef/app/self-order-kiosk/src/actions.js":"15","/home/anshul/robochef/app/self-order-kiosk/src/components/Logo.js":"16"},{"size":257,"mtime":1623921634513,"results":"17","hashOfConfig":"18"},{"size":2409,"mtime":1623921634513,"results":"19","hashOfConfig":"18"},{"size":5284,"mtime":1623921634513,"results":"20","hashOfConfig":"18"},{"size":1202,"mtime":1623921634513,"results":"21","hashOfConfig":"18"},{"size":2446,"mtime":1623921634513,"results":"22","hashOfConfig":"18"},{"size":1184,"mtime":1623921634513,"results":"23","hashOfConfig":"18"},{"size":1797,"mtime":1623921634513,"results":"24","hashOfConfig":"18"},{"size":6225,"mtime":1623921634513,"results":"25","hashOfConfig":"18"},{"size":2421,"mtime":1623921634517,"results":"26","hashOfConfig":"18"},{"size":4165,"mtime":1623921634513,"results":"27","hashOfConfig":"18"},{"size":1022,"mtime":1623921634513,"results":"28","hashOfConfig":"18"},{"size":2096,"mtime":1623921634513,"results":"29","hashOfConfig":"18"},{"size":8474,"mtime":1623921634513,"results":"30","hashOfConfig":"18"},{"size":2001,"mtime":1623921634517,"results":"31","hashOfConfig":"18"},{"size":3179,"mtime":1623921634513,"results":"32","hashOfConfig":"18"},{"size":243,"mtime":1623921634513,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"ymm8bg",{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},"/home/anshul/robochef/app/self-order-kiosk/src/index.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/App.js",["74"],"import {\n  Container,\n  CssBaseline,\n  Paper,\n  ThemeProvider,\n} from '@material-ui/core';\nimport React, { useContext } from 'react';\nimport { Store } from './Store';\nimport { Route, BrowserRouter } from 'react-router-dom';\nimport ChooseScreen from './screens/ChooseScreen';\nimport HomeScreen from './screens/HomeScreen';\nimport OrderScreen from './screens/OrderScreen';\nimport QueueScreen from './screens/QueueScreen';\nimport { createMuiTheme } from '@material-ui/core';\nimport ReviewScreen from './screens/ReviewScreen';\nimport PaymentScreen from './screens/PaymentScreen';\nimport AdminScreen from './screens/AdminScreen';\nimport SelectPaymentScreen from './screens/SelectPaymentScreen';\nimport CompleteOrderScreen from './screens/CompleteOrderScreen';\nimport { Helmet } from 'react-helmet';\nimport './App.css';\n\nconst theme = createMuiTheme({\n  typography: {\n    h1: { fontWeight: 'bold' },\n    h2: {\n      fontSize: '2rem',\n      color: 'black',\n    },\n    h3: {\n      fontSize: '1.8rem',\n      fontWeight: 'bold',\n      color: 'white',\n    },\n  },\n  palette: {\n    primary: { main: '#ff1744' },\n    secondary: {\n      main: '#118e16',\n      contrastText: '#ffffff',\n    },\n  },\n});\nfunction App() {\n  const { state } = useContext(Store);\n  const widthScreen = true;\n\n  return (\n    <BrowserRouter>\n      <Helmet>\n        <title>Self-Order Kiosk</title>\n      </Helmet>\n\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <Container maxWidth={widthScreen ? 'lg' : 'sm'}>\n          <Paper>\n            <Route path=\"/\" component={HomeScreen} exact></Route>\n            <Route path=\"/admin\" component={AdminScreen} exact></Route>\n            <Route path=\"/queue\" component={QueueScreen} exact></Route>\n            <Route path=\"/choose\" component={ChooseScreen} exact></Route>\n            <Route path=\"/order\" component={OrderScreen} exact></Route>\n            <Route path=\"/review\" component={ReviewScreen} exact></Route>\n            <Route\n              path=\"/select-payment\"\n              component={SelectPaymentScreen}\n              exact\n            ></Route>\n            <Route path=\"/payment\" component={PaymentScreen} exact></Route>\n            <Route\n              path=\"/complete\"\n              component={CompleteOrderScreen}\n              exact\n            ></Route>\n          </Paper>\n        </Container>\n      </ThemeProvider>\n    </BrowserRouter>\n  );\n}\nexport default App;\n","/home/anshul/robochef/app/self-order-kiosk/src/Store.js",["75"],"import React, { createContext, useReducer } from 'react';\nimport useReducerWithThunk from 'use-reducer-thunk';\nimport {\n  ORDER_ADD_ITEM,\n  ORDER_REMOVE_ITEM,\n  ORDER_CLEAR,\n  CATEGORY_LIST_FAIL,\n  CATEGORY_LIST_REQUEST,\n  CATEGORY_LIST_SUCCESS,\n  PRODUCT_LIST_FAIL,\n  PRODUCT_LIST_REQUEST,\n  PRODUCT_LIST_SUCCESS,\n  ORDER_SET_TYPE,\n  ORDER_SET_PAYMENT_TYPE,\n  ORDER_CREATE_FAIL,\n  ORDER_CREATE_SUCCESS,\n  ORDER_CREATE_REQUEST,\n  SCREEN_SET_WIDTH,\n  ORDER_QUEUE_LIST_REQUEST,\n  ORDER_QUEUE_LIST_SUCCESS,\n  ORDER_QUEUE_LIST_FAIL,\n  ORDER_LIST_REQUEST,\n  ORDER_LIST_SUCCESS,\n  ORDER_LIST_FAIL,\n} from './constants';\n\nexport const Store = createContext();\n\nconst initialState = {\n  widthScreen: false,\n  orderList: { loading: true },\n  queueList: { loading: true },\n  categoryList: { loading: true },\n  productList: { loading: true },\n  order: {\n    orderItems: [],\n    orderType: 'Eat in',\n    paymentType: 'Pay here',\n    taxPrice: 0,\n    totalPrice: 0,\n    itemsCount: 0,\n  },\n  orderCreate: { loading: true },\n};\n\nfunction reducer(state, action) {\n  switch (action.type) {\n    case SCREEN_SET_WIDTH:\n      return {\n        ...state,\n        widthScreen: true,\n      };\n    case ORDER_SET_TYPE:\n      return {\n        ...state,\n        order: { ...state.order, orderType: action.payload },\n      };\n    case ORDER_SET_PAYMENT_TYPE:\n      return {\n        ...state,\n        order: { ...state.order, paymentType: action.payload },\n      };\n    case CATEGORY_LIST_REQUEST:\n      return { ...state, categoryList: { loading: true } };\n    case CATEGORY_LIST_SUCCESS:\n      return {\n        ...state,\n        categoryList: { loading: false, categories: action.payload },\n      };\n    case CATEGORY_LIST_FAIL:\n      return {\n        ...state,\n        categoryList: { loading: false, error: action.payload },\n      };\n    case PRODUCT_LIST_REQUEST:\n      return { ...state, productList: { loading: true } };\n    case PRODUCT_LIST_SUCCESS:\n      return {\n        ...state,\n        productList: { loading: false, products: action.payload },\n      };\n    case PRODUCT_LIST_FAIL:\n      return {\n        ...state,\n        productList: { loading: false, error: action.payload },\n      };\n    case ORDER_QUEUE_LIST_REQUEST:\n      return { ...state, queueList: { loading: true } };\n    case ORDER_QUEUE_LIST_SUCCESS:\n      return {\n        ...state,\n        queueList: { loading: false, queue: action.payload },\n      };\n    case ORDER_QUEUE_LIST_FAIL:\n      return {\n        ...state,\n        queueList: { loading: false, error: action.payload },\n      };\n    case ORDER_LIST_REQUEST:\n      return { ...state, orderList: { loading: true } };\n    case ORDER_LIST_SUCCESS:\n      return {\n        ...state,\n        orderList: { loading: false, orders: action.payload },\n      };\n    case ORDER_LIST_FAIL:\n      return {\n        ...state,\n        orderList: { loading: false, error: action.payload },\n      };\n    case ORDER_CREATE_REQUEST:\n      return { ...state, orderCreate: { loading: true } };\n    case ORDER_CREATE_SUCCESS:\n      return {\n        ...state,\n        orderCreate: { loading: false, newOrder: action.payload },\n      };\n    case ORDER_CREATE_FAIL:\n      return {\n        ...state,\n        orderCreate: { loading: false, error: action.payload },\n      };\n    case ORDER_ADD_ITEM: {\n      const item = action.payload;\n      const existItem = state.order.orderItems.find(\n        (x) => x.name === item.name\n      );\n      const orderItems = existItem\n        ? state.order.orderItems.map((x) =>\n            x.name === existItem.name ? item : x\n          )\n        : [...state.order.orderItems, item];\n\n      const itemsCount = orderItems.reduce((a, c) => a + c.quantity, 0);\n      const itemsPrice = orderItems.reduce(\n        (a, c) => a + c.quantity * c.price,\n        0\n      );\n      const taxPrice = Math.round(0.15 * itemsPrice * 100) / 100;\n      const totalPrice = Math.round((itemsPrice + taxPrice) * 100) / 100;\n      return {\n        ...state,\n        order: {\n          ...state.order,\n          orderItems,\n          taxPrice,\n          totalPrice,\n          itemsCount,\n        },\n      };\n    }\n    case ORDER_REMOVE_ITEM:\n      const orderItems = state.order.orderItems.filter(\n        (x) => x.name !== action.payload.name\n      );\n      const itemsCount = orderItems.reduce((a, c) => a + c.quantity, 0);\n      const itemsPrice = orderItems.reduce(\n        (a, c) => a + c.quantity * c.price,\n        0\n      );\n      const taxPrice = Math.round(0.15 * itemsPrice * 100) / 100;\n      const totalPrice = Math.round((itemsPrice + taxPrice) * 100) / 100;\n      return {\n        ...state,\n        order: {\n          ...state.order,\n          orderItems,\n          taxPrice,\n          totalPrice,\n          itemsCount,\n        },\n      };\n\n    case ORDER_CLEAR:\n      return {\n        ...state,\n        order: {\n          orderItems: [],\n          taxPrice: 0,\n          totalPrice: 0,\n          itemsCount: 0,\n        },\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function StoreProvider(props) {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  //const [state, dispatch] = useReducerWithThunk(reducer, initialState, 'example');\n\n  const value = { state, dispatch };\n  return <Store.Provider value={value}>{props.children}</Store.Provider>;\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/constants.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/screens/ChooseScreen.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/screens/HomeScreen.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/screens/QueueScreen.js",["76"],"import React, { useContext, useEffect } from 'react';\nimport { Store } from '../Store';\nimport { listQueue } from '../actions';\nimport {\n  Box,\n  CircularProgress,\n  Grid,\n  List,\n  ListItem,\n  Paper,\n} from '@material-ui/core';\nimport { useStyles } from '../styles';\nimport { Alert } from '@material-ui/lab';\nimport { Helmet } from 'react-helmet';\nexport default function QueueScreen(props) {\n  const styles = useStyles();\n\n  const { state, dispatch } = useContext(Store);\n  const { queue, loading, error } = state.queueList;\n\n  useEffect(() => {\n    listQueue(dispatch);\n  }, []);\n\n  return (\n    <Box className={[styles.root]}>\n      <Helmet>\n        <title>Queue</title>\n      </Helmet>\n      <Box className={[styles.main]}>\n        {loading ? (\n          <CircularProgress />\n        ) : error ? (\n          <Alert severity=\"error\">{error}</Alert>\n        ) : (\n          <Grid container spacing={2}>\n            <Grid item md={6}>\n              <Paper>\n                <h1 className={styles.processing}>In Progress</h1>\n                <List>\n                  {queue.inProgressOrders.map((order) => (\n                    <ListItem key={order.number}>\n                      <h1>{order.number}</h1>\n                    </ListItem>\n                  ))}\n                </List>\n              </Paper>\n            </Grid>\n            <Grid item md={6}>\n              <Paper>\n                <h1 className={styles.ready}>Now Serving </h1>\n                <List>\n                  {queue.servingOrders.map((order) => (\n                    <ListItem key={order.number}>\n                      <h1>{order.number}</h1>\n                    </ListItem>\n                  ))}\n                </List>\n              </Paper>\n            </Grid>\n          </Grid>\n        )}\n      </Box>\n    </Box>\n  );\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/screens/ReviewScreen.js",["77"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Store } from '../Store';\nimport { addToOrder, removeFromOrder } from '../actions';\nimport {\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  CardContent,\n  Dialog,\n  DialogTitle,\n  Grid,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nexport default function ReviewScreen(props) {\n  const styles = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const {\n    orderItems,\n    itemsCount,\n    totalPrice,\n    taxPrice,\n    orderType,\n  } = state.order;\n  const [quantity, setQuantity] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [product, setProduct] = useState({});\n  const closeHandler = () => {\n    setIsOpen(false);\n  };\n  const productClickHandler = (p) => {\n    setProduct(p);\n    setIsOpen(true);\n  };\n  const addToOrderHandler = () => {\n    addToOrder(dispatch, { ...product, quantity });\n    setIsOpen(false);\n  };\n  const cancelOrRemoveFromOrder = () => {\n    removeFromOrder(dispatch, product);\n    setIsOpen(false);\n  };\n  const procedToCheckoutHandler = () => {\n    // procedToCheckout(dispatch);\n    props.history.push('/select-payment');\n  };\n  useEffect(() => {}, []);\n\n  return (\n    <Box className={[styles.root, \"review-screen-container\"]}>\n      <Box className={[styles.main, styles.center]}>\n        <Dialog\n          onClose={closeHandler}\n          aria-labelledby=\"max-width-dialog-title\"\n          open={isOpen}\n          fullWidth={true}\n          maxWidth=\"sm\"\n        >\n          <DialogTitle className={styles.center}>\n            Add {product.name}\n          </DialogTitle>\n          <Box className={[styles.row, styles.center]}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={quantity === 1}\n              onClick={(e) => quantity > 1 && setQuantity(quantity - 1)}\n            >\n              <RemoveIcon />\n            </Button>\n            <TextField\n              inputProps={{ className: styles.largeInput }}\n              className={styles.largeNumber}\n              type=\"number\"\n              min={1}\n              variant=\"filled\"\n              value={quantity}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={(e) => setQuantity(quantity + 1)}\n            >\n              <AddIcon />\n            </Button>\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={cancelOrRemoveFromOrder}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              {orderItems.find((x) => x.name === product.name)\n                ? 'Remove From Order'\n                : 'Cancel'}\n            </Button>\n\n            <Button\n              onClick={addToOrderHandler}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              ADD To Order\n            </Button>\n          </Box>\n        </Dialog>\n        <Box className={[styles.center, styles.column]}>\n          <Logo large></Logo>\n          <Typography\n            gutterBottom\n            className={styles.title}\n            variant=\"h3\"\n            component=\"h3\"\n          >\n            Review my {orderType} order\n          </Typography>\n        </Box>\n\n        <Grid className=\"order-list\" container>\n          {orderItems.map((orderItem) => (\n            <Grid item md={12} key={orderItem.name}>\n              <Card\n                className={styles.card}\n                onClick={() => productClickHandler(orderItem)}\n              >\n                <CardActionArea>\n                  <CardContent>\n                    <Box className={[styles.row, styles.between]}>\n                      <Typography\n                        gutterBottom\n                        variant=\"body2\"\n                        color=\"textPrimary\"\n                        component=\"p\"\n                      >\n                        {orderItem.name}\n                      </Typography>\n                      <Button variant=\"contained\">Edit</Button>\n                    </Box>\n\n                    <Box className={[styles.row, styles.between]}>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textSecondary\"\n                        component=\"p\"\n                      >\n                        {orderItem.calorie} Cal\n                      </Typography>\n                      <Typography\n                        variant=\"body2\"\n                        color=\"textPrimary\"\n                        component=\"p\"\n                      >\n                        {orderItem.quantity} x €{orderItem.price}\n                      </Typography>\n                    </Box>\n                  </CardContent>\n                </CardActionArea>\n              </Card>\n            </Grid>\n          ))}\n        </Grid>\n      </Box>\n      <Box>\n        <Box>\n          <Box className={[styles.bordered, styles.space, \"summary-footer\"]}>\n            <span className=\"summary-footer-item summary-items\">Items: {itemsCount}</span>\n            <span className=\"summary-footer-item summary-total\">Total: €{totalPrice} </span>\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={() => {\n                props.history.push(`/order`);\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n              className={styles.largeButton}\n            >\n              Back\n            </Button>\n\n            <Button\n              onClick={procedToCheckoutHandler}\n              variant=\"contained\"\n              color=\"secondary\"\n              disabled={orderItems.length === 0}\n              className={styles.largeButton}\n            >\n              Proceed To Checkout\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/screens/SelectPaymentScreen.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/screens/AdminScreen.js",["78"],"import React, { useContext, useEffect } from 'react';\nimport { Store } from '../Store';\nimport { listOrders } from '../actions';\nimport {\n  Box,\n  Button,\n  CircularProgress,\n  Paper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n} from '@material-ui/core';\nimport { useStyles } from '../styles';\nimport { Alert } from '@material-ui/lab';\nimport Axios from 'axios';\nimport { Helmet } from 'react-helmet';\nexport default function AdminScreen(props) {\n  const styles = useStyles();\n\n  const { state, dispatch } = useContext(Store);\n  const { orders, loading, error } = state.orderList;\n  const setOrderStateHandler = async (order, action) => {\n    try {\n      await Axios.put('/api/orders/' + order._id, {\n        action: action,\n      });\n      listOrders(dispatch);\n    } catch (err) {\n      alert(err.message);\n    }\n  };\n\n  useEffect(() => {\n    listOrders(dispatch);\n  }, []);\n\n  return (\n    <Box className={[styles.root]}>\n      <Helmet>\n        <title>Admin Orders</title>\n      </Helmet>\n\n      <Box className={[styles.main]}>\n        {loading ? (\n          <CircularProgress />\n        ) : error ? (\n          <Alert severity=\"error\">{error}</Alert>\n        ) : (\n          <TableContainer component={Paper}>\n            <Table aria-label=\"Orders\">\n              <TableHead>\n                <TableRow>\n                  <TableCell>Order Number</TableCell>\n                  <TableCell align=\"right\">Price&nbsp;(€)</TableCell>\n                  <TableCell align=\"right\">Count</TableCell>\n                  <TableCell align=\"right\">Items</TableCell>\n                  <TableCell align=\"right\">Type</TableCell>\n                  <TableCell align=\"right\">Payment</TableCell>\n                  <TableCell align=\"right\">State</TableCell>\n                  <TableCell align=\"right\">Actions</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {orders.map((order) => (\n                  <TableRow key={order.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {order.number}\n                    </TableCell>\n                    <TableCell align=\"right\">{order.totalPrice}</TableCell>\n                    <TableCell align=\"right\">\n                      {order.orderItems.length}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      {order.orderItems.map((item) => (\n                        <Box>\n                          {item.name} x {item.quantity}\n                        </Box>\n                      ))}\n                    </TableCell>\n                    <TableCell align=\"right\">{order.orderType}</TableCell>\n                    <TableCell align=\"right\">{order.paymentType}</TableCell>\n                    <TableCell align=\"right\">\n                      {order.inProgress\n                        ? 'In Progress'\n                        : order.isReady\n                        ? 'Ready'\n                        : order.isDelivered\n                        ? 'Delivered'\n                        : 'Unknown'}\n                    </TableCell>\n                    <TableCell align=\"right\">\n                      <Button\n                        variant=\"contained\"\n                        onClick={() => setOrderStateHandler(order, 'ready')}\n                        color=\"secondary\"\n                      >\n                        Ready\n                      </Button>\n                      <Button\n                        color=\"primary\"\n                        variant=\"contained\"\n                        onClick={() => setOrderStateHandler(order, 'cancel')}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        variant=\"contained\"\n                        onClick={() => setOrderStateHandler(order, 'deliver')}\n                      >\n                        Deliver\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        )}\n      </Box>\n    </Box>\n  );\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/screens/PaymentScreen.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/screens/CompleteOrderScreen.js",["79"],"import React, { useContext, useEffect } from 'react';\nimport { Box, Button, CircularProgress, Typography } from '@material-ui/core';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nimport { Store } from '../Store';\nimport { Alert } from '@material-ui/lab';\nimport { createOrder } from '../actions';\nexport default function CompleteOrderScreen(props) {\n  const styles = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const { order } = state;\n  const { loading, error, newOrder } = state.orderCreate;\n\n  useEffect(() => {\n    if (order.orderItems.length > 0) {\n      createOrder(dispatch, order);\n    }\n  }, [order]);\n\n  return (\n    <Box className={[\"complete-order-container\", styles.root]}>\n      <Box className={[styles.main, styles.center]}>\n        <Box>\n          <Logo large></Logo>\n          {loading ? (\n            <CircularProgress></CircularProgress>\n          ) : error ? (\n            <Alert severity=\"error\">{error}</Alert>\n          ) : (\n            <>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h3\"\n                component=\"h3\"\n              >\n                Your order has been placed\n              </Typography>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h1\"\n                component=\"h1\"\n              >\n                Thank you!\n              </Typography>\n              <Typography\n                gutterBottom\n                className={styles.title}\n                variant=\"h3\"\n                component=\"h3\"\n              >\n                Your order number is {newOrder.number}\n              </Typography>\n            </>\n          )}\n        </Box>\n      </Box>\n      <Box className={[styles.center, styles.space]}>\n        <Button\n          onClick={() => props.history.push('/')}\n          variant=\"contained\"\n          color=\"primary\"\n          className={styles.largeButton}\n        >\n          Order Again\n        </Button>\n      </Box>\n    </Box>\n  );\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/screens/OrderScreen.js",["80"],"import React, { useContext, useEffect, useState } from 'react';\nimport { Store } from '../Store';\nimport {\n  addToOrder,\n  clearOrder,\n  listCategories,\n  listProducts,\n  removeFromOrder,\n} from '../actions';\nimport {\n  Avatar,\n  Box,\n  Button,\n  Card,\n  CardActionArea,\n  CardContent,\n  CardMedia,\n  CircularProgress,\n  Dialog,\n  DialogTitle,\n  Grid,\n  List,\n  ListItem,\n  Slide,\n  TextField,\n  Typography,\n} from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport RemoveIcon from '@material-ui/icons/Remove';\nimport { Alert } from '@material-ui/lab';\nimport { useStyles } from '../styles';\nimport Logo from '../components/Logo';\nexport default function OrderScreen(props) {\n  const styles = useStyles();\n  const { state, dispatch } = useContext(Store);\n  const { categories, loading, error } = state.categoryList;\n  const {\n    products,\n    loading: loadingProducts,\n    error: errorProducts,\n  } = state.productList;\n  const {\n    orderItems,\n    itemsCount,\n    totalPrice,\n    taxPrice,\n    orderType,\n  } = state.order;\n\n  const [categoryName, setCategoryName] = useState('');\n\n  const [quantity, setQuantity] = useState(1);\n  const [isOpen, setIsOpen] = useState(false);\n  const [product, setProduct] = useState({});\n  const closeHandler = () => {\n    setIsOpen(false);\n  };\n  const productClickHandler = (p) => {\n    setProduct(p);\n    setIsOpen(true);\n  };\n  const addToOrderHandler = () => {\n    addToOrder(dispatch, { ...product, quantity });\n    setIsOpen(false);\n  };\n  const cancelOrRemoveFromOrder = () => {\n    removeFromOrder(dispatch, product);\n    setIsOpen(false);\n  };\n  const previewOrderHandler = () => {\n    props.history.push(`/review`);\n  };\n  useEffect(() => {\n    if (!categories) {\n      listCategories(dispatch);\n    } else {\n      listProducts(dispatch, categoryName);\n    }\n  }, [categories, categoryName]);\n\n  const categoryClickHandler = (name) => {\n    setCategoryName(name);\n    listProducts(dispatch, categoryName);\n  };\n\n  return (\n    <Box className={\"order-screen-container \" + styles.root}>\n      <Box className={styles.main}>\n        <Dialog\n          onClose={closeHandler}\n          aria-labelledby=\"max-width-dialog-title\"\n          open={isOpen}\n          fullWidth={true}\n          maxWidth=\"sm\"\n        >\n          <DialogTitle className={styles.center}>\n            Add {product.name}\n          </DialogTitle>\n          <Box className={[styles.row, styles.center]}>\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={quantity === 1}\n              onClick={(e) => quantity > 1 && setQuantity(quantity - 1)}\n            >\n              <RemoveIcon />\n            </Button>\n            <TextField\n              inputProps={{ className: styles.largeInput }}\n              InputProps={{\n                bar: true,\n                inputProps: {\n                  className: styles.largeInput,\n                },\n              }}\n              className={styles.largeNumber}\n              type=\"number\"\n              variant=\"filled\"\n              min={1}\n              value={quantity}\n            />\n            <Button\n              variant=\"contained\"\n              color=\"primary\"\n              onClick={(e) => setQuantity(quantity + 1)}\n            >\n              <AddIcon />\n            </Button>\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={cancelOrRemoveFromOrder}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              {orderItems.find((x) => x.name === product.name)\n                ? 'Remove From Order'\n                : 'Cancel'}\n            </Button>\n\n            <Button\n              onClick={addToOrderHandler}\n              variant=\"contained\"\n              color=\"primary\"\n              size=\"large\"\n              className={styles.largeButton}\n            >\n              ADD To Order\n            </Button>\n          </Box>\n        </Dialog>\n\n        <Grid container>\n          <Grid item md={2} className=\"category-list\">\n            <List>\n              {loading ? (\n                <CircularProgress />\n              ) : error ? (\n                <Alert severity=\"error\">{error}</Alert>\n              ) : (\n                <>\n                  <ListItem button onClick={() => categoryClickHandler('')}>\n                    <Logo></Logo>\n                  </ListItem>\n                  {categories.map((category) => (\n                    <ListItem\n                      key={category.name}\n                      button\n                      onClick={() => categoryClickHandler(category.name)}\n                    >\n                      <Avatar alt={category.name} src={category.image} />\n                    </ListItem>\n                  ))}\n                </>\n              )}\n            </List>\n          </Grid>\n          <Grid  className=\"product-grid-container\" item md={10}>\n            <Typography\n              gutterBottom\n              className={styles.title + \" products-category-menu-title\"}\n              variant=\"h2\"\n              component=\"h2\"\n            >\n              {categoryName || 'Main Menu'}\n            </Typography>\n\n            <Grid container className=\"product-grid\" spacing={1}>\n              {loadingProducts ? (\n                <CircularProgress />\n              ) : errorProducts ? (\n                <Alert severity=\"error\">{errorProducts}</Alert>\n              ) : (\n                products.map((product) => (\n                  <Slide key={product.name} direction=\"up\" in={true}>\n                    <div item md={6}>\n                      <Card\n                        className={styles.card}\n                        onClick={() => productClickHandler(product)}\n                      >\n                        <CardActionArea>\n                          <CardMedia\n                            component=\"img\"\n                            alt={product.name}\n                            image={product.image}\n                            className={styles.media}\n                          />\n                          <CardContent>\n                            <Typography\n                              gutterBottom\n                              variant=\"body2\"\n                              color=\"textPrimary\"\n                              component=\"p\"\n                            >\n                              {product.name}\n                            </Typography>\n                            <Box className={styles.cardFooter}>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"textSecondary\"\n                                component=\"p\"\n                              >\n                                {product.calorie} Cal\n                              </Typography>\n                              <Typography\n                                variant=\"body2\"\n                                color=\"textPrimary\"\n                                component=\"p\"\n                              >\n                                €{product.price}\n                              </Typography>\n                            </Box>\n                          </CardContent>\n                        </CardActionArea>\n                      </Card>\n                    </div>\n                  </Slide>\n                ))\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Box>\n      <Box>\n        <Box>\n          <Box className={[styles.bordered, styles.space]}>\n            My Order - {orderType} | Tax: €{taxPrice} | Total: €{totalPrice} |\n            Items: {itemsCount}\n          </Box>\n          <Box className={[styles.row, styles.around]}>\n            <Button\n              onClick={() => {\n                clearOrder(dispatch);\n                props.history.push(`/`);\n              }}\n              variant=\"contained\"\n              color=\"primary\"\n              className={styles.largeButton}\n            >\n              Cancel Order\n            </Button>\n\n            <Button\n              onClick={previewOrderHandler}\n              variant=\"contained\"\n              color=\"primary\"\n              disabled={orderItems.length === 0}\n              className={styles.largeButton}\n            >\n              Done\n            </Button>\n          </Box>\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n","/home/anshul/robochef/app/self-order-kiosk/src/styles.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/actions.js",[],"/home/anshul/robochef/app/self-order-kiosk/src/components/Logo.js",["81"],"import React from 'react';\nimport { useStyles } from '../styles';\n\nexport default function Logo(props) {\n  // const styles = useStyles();\n  return (\n    <img\n      src=\"logo.png\"\n      alt=\"Delice\"\n      className={\"logo \"}\n    ></img>\n  );\n}\n",{"ruleId":"82","severity":1,"message":"83","line":45,"column":11,"nodeType":"84","messageId":"85","endLine":45,"endColumn":16},{"ruleId":"82","severity":1,"message":"86","line":2,"column":8,"nodeType":"84","messageId":"85","endLine":2,"endColumn":27},{"ruleId":"87","severity":1,"message":"88","line":23,"column":6,"nodeType":"89","endLine":23,"endColumn":8,"suggestions":"90"},{"ruleId":"82","severity":1,"message":"91","line":27,"column":5,"nodeType":"84","messageId":"85","endLine":27,"endColumn":13},{"ruleId":"87","severity":1,"message":"88","line":38,"column":6,"nodeType":"89","endLine":38,"endColumn":8,"suggestions":"92"},{"ruleId":"87","severity":1,"message":"88","line":18,"column":6,"nodeType":"89","endLine":18,"endColumn":13,"suggestions":"93"},{"ruleId":"87","severity":1,"message":"88","line":79,"column":6,"nodeType":"89","endLine":79,"endColumn":32,"suggestions":"94"},{"ruleId":"82","severity":1,"message":"95","line":2,"column":10,"nodeType":"84","messageId":"85","endLine":2,"endColumn":19},"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'useReducerWithThunk' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["96"],"'taxPrice' is assigned a value but never used.",["97"],["98"],["99"],"'useStyles' is defined but never used.",{"desc":"100","fix":"101"},{"desc":"100","fix":"102"},{"desc":"103","fix":"104"},{"desc":"105","fix":"106"},"Update the dependencies array to be: [dispatch]",{"range":"107","text":"108"},{"range":"109","text":"108"},"Update the dependencies array to be: [dispatch, order]",{"range":"110","text":"111"},"Update the dependencies array to be: [categories, categoryName, dispatch]",{"range":"112","text":"113"},[578,580],"[dispatch]",[907,909],[653,660],"[dispatch, order]",[1835,1861],"[categories, categoryName, dispatch]"]